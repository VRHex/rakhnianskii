import os
import asyncio
import datetime
import pymysql
pymysql.install_as_MySQLdb()

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –∏–∑ models.py
from models import Base, Task

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not DATABASE_URL:
    raise ValueError("–°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ.")

print(f"DATABASE_URL: {DATABASE_URL}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLAlchemy
engine = create_engine(DATABASE_URL, echo=True)
Session = sessionmaker(bind=engine)
session = Session()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
Base.metadata.create_all(engine)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def test_db_connection():
    try:
        task = session.query(Task).first()
        if task:
            print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞: {task.description}")
        else:
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. –¢–∞–±–ª–∏—Ü–∞ Task –ø—É—Å—Ç–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /tasks
@dp.message(Command(commands=["tasks"]))
async def list_tasks(message: types.Message):
    try:
        tasks = session.query(Task).order_by(Task.priority.desc()).all()
        if not tasks:
            await message.reply("‚ùå –ó–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        tasks_text = "üìã **–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:**\n\n"
        for task in tasks:
            tasks_text += (
                f"üîπ **–û–ø–∏—Å–∞–Ω–∏–µ:** {task.description}\n"
                f"   üïí **–°—Ç–∞—Ç—É—Å:** {task.status}\n"
                f"   üìå **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {task.priority}\n"
                f"   üí° **–ù–∞–∑–Ω–∞—á–µ–Ω–æ:** {task.assignedTo or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'}\n"
                f"   ‚è±Ô∏è **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {task.executionTime or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –º–∏–Ω\n"
                f"   üìà **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {task.efficiency or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}%\n"
                f"   üìù **–ó–∞–º–µ—Ç–∫–∏:** {task.notes or '–ù–µ—Ç'}\n\n"
            )

        await message.reply(tasks_text, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /add_task
@dp.message(Command(commands=["add_task"]))
async def add_task(message: types.Message):
    try:
        args = message.get_args().split(',')
        if len(args) < 2:
            await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_task <–æ–ø–∏—Å–∞–Ω–∏–µ>,<–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –≤—Ä–µ–º—è>")
            return

        description = args[0].strip()
        estimated_time = int(args[1].strip())

        new_task = Task(
            description=description,
            status="pending",
            estimatedTime=estimated_time
        )
        session.add(new_task)
        session.commit()

        await message.reply("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command(commands=["start"]))
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. üöÄ")

# –≠—Ö–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo_message(message: types.Message):
    await message.answer(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. üöÄ")
    test_db_connection()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
